plugins {
    id 'java'
    id 'org.mikeneck.graalvm-native-image' version 'v0.8.0'
}

group = 'com.jburgess.jwt'
version = '1.0-SNAPSHOT'

description = """jwt-extractor"""

sourceCompatibility = 11
targetCompatibility = 11
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

ext {
    helidonversion = '2.0.1'
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // import Helidon BOM
    implementation enforcedPlatform("io.helidon:helidon-dependencies:${project.helidonversion}")
    implementation 'io.helidon.webserver:helidon-webserver'
    implementation 'io.helidon.media:helidon-media-jsonp'
    implementation 'io.helidon.config:helidon-config-yaml'
    implementation 'io.helidon.security:helidon-security-jwt'
    implementation 'io.helidon.integrations.graal:helidon-graal-native-image-extension'
    testImplementation 'io.helidon.webclient:helidon-webclient'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

// define a custom task to copy all dependencies in the runtime classpath
// into build/libs/libs
// uses built-in Copy
task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into 'build/libs/libs'
}

// add it as a dependency of built-in task 'assemble'
copyLibs.dependsOn jar
assemble.dependsOn copyLibs

nativeImage {
    graalVmHome = System.getenv("JAVA_HOME")
    mainClass = 'com.jburgess.jwt.Main'
    executableName = 'jwt-extractor'
    outputDirectory = file("$buildDir/bin")
    arguments(
            '--no-fallback',
            '--static',
            '--enable-all-security-services',
            '--initialize-at-run-time=com.jburgess.jwt',
            '--report-unsupported-elements-at-runtime'
    )
}

generateNativeImageConfig {
    enabled = false
    byRunningApplication {
        stdIn("""
    |total: 2
    |contents:
    |  - name: foo
    |    size: 2052
    |""".stripMargin())
    }
    byRunningApplicationWithoutArguments()
    byRunningApplication {
        arguments('-h')
    }
}

jar {
    archiveFileName = "${project.name}.jar"
    manifest {
        attributes ('Main-Class': 'com.jburgess.jwt.Main',
            'Class-Path': configurations.runtimeClasspath.files.collect { "libs/$it.name" }.join(' ')
        )
    }
}